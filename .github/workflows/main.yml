# SPDX-License-Identifier: BSD-2-Clause

name: Continuous Integration

on:
  push:
    branches:
      - main

jobs:
  macos_wheel_x86_64:
    runs-on: macos-13
    env:
      # This is where bazelisk caches its downloads of Bazel.
      BAZELISK_HOME: /Users/runner/.cache/bazel_ci/bazelisk
      HOMEBREW_COLOR: 1
      HOMEBREW_CASK_OPTS: --require-sha
      HOMEBREW_CURL_RETRIES: 4
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSECURE_REDIRECT: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      SNOPT_PATH: /tmp/snopt.tar.gz
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SNOPT_PAT }}
          submodules: true
      # Restore the most appropriate cache.
      #
      # In the below: `github.ref` will be either "refs/pull/<pr_number>/merge"
      # or "refs/heads/main"; `github.run_number` is a monotonically increasing
      # serial number; and `github.run_attempt` is a typically 1.
      #
      # The `key` declared here will never match (since it encodes the current
      # run_number) but illustrates the name we'll use to save the caches when
      # we're done.
      #
      # However, one of the `restore-keys` patterns *should* always match. The
      # effects we should see from the `restore-keys` patterns are:
      #
      # * When building the `main` branch, we'll always pull the most recently
      #   updated main caches. Both restore keys say 
      #    "bazel_ci-refs/heads/main-"
      #   and the prior archives are named, e.g.,
      #    "bazel_ci-refs/heads/main-####-#".
      #   GitHub will use the *most recently saved* archive name that matches
      #   the restore key prefix (no matter the lexicographic ordering of
      #   the ####-# part).
      #
      # * Ditto for the first build of a PR; the first restore key will not
      #   match anything, so it falls back to the main caches.
      #
      # * For subsequent builds of a PR, the first restore key, e.g.,
      #    "bazel_ci-refs/pull/###/merge-"
      #   should match the most recently saved PR key
      #    "bazel_ci-refs/pull/###/merge-####-#".
      - uses: actions/cache/restore@v3
        with:
          path: ~/.cache/bazel_ci
          key: bazel_ci-${{ github.ref }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            bazel_ci-${{ github.ref }}-
            bazel_ci-refs/heads/main-
      - name: Report cache sizes
        run: |
          du -ms ~/.cache/bazel_ci/* || true
      # The actual stuff we care about, buried in a pile of YAML line noise.
      - name: Setup
        run: .github/ci_setup.sh
      - name: Build
        run: .github/ci_build.sh
      # Save the updated cache snapshots, so we never do the same work twice.
      # By default, actions/cache only saves after a successful workflow, but
      # our caches are bags of files where we only ever add new files (not change
      # an existing files), so it's always safe to snapshot.
      - uses: actions/cache/save@v3
        if: always()
        with:
          path: ~/.cache/bazel_ci
          key: bazel_ci-${{ github.ref }}-${{ github.run_number }}-${{ github.run_attempt }}
